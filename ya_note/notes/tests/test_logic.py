from django.contrib.auth import get_user_model
from django.test import TestCase
from django.urls import reverse

from notes.models import Note


User = get_user_model()


class TestLogic(TestCase):
    @classmethod
    def setUpTestData(cls):
        cls.user = User.objects.create_user(
            username='user',
            password='pass',
        )

        cls.other_user = User.objects.create_user(
            username='other',
            password='pass',
        )

        cls.note = Note.objects.create(
            title='Original title',
            text='Original text',
            slug='original-slug',
            author=cls.user,
        )

        cls.add_url = reverse('notes:add')
        cls.edit_url = reverse('notes:edit', kwargs={'slug': cls.note.slug})
        cls.delete_url = reverse(
            'notes:delete', kwargs={'slug': cls.note.slug}
        )

    def test_logged_in_user_can_create_note(self):
        self.client.force_login(self.user)
        response = self.client.post(self.add_url, data={
            'title': 'New title',
            'text': 'Some text',
            'slug': 'new-slug',
        })

        self.assertEqual(Note.objects.count(), 2)
        self.assertRedirects(response, reverse('notes:success'))

    def test_anonymous_cannot_create_note(self):
        self.client.post(self.add_url, data={
            'title': 'New title',
            'text': 'Some text',
            'slug': 'new-slug',
        })

        self.assertEqual(Note.objects.count(), 1)

    def test_slug_is_unique(self):
        self.client.force_login(self.user)
        response = self.client.post(self.add_url, data={
            'title': 'Duplicate title',
            'text': 'Some text',
            'slug': 'original-slug',
        })

        form = response.context['form']
        self.assertIn('slug', form.errors)
        self.assertTrue('slug' in form.errors)
        self.assertEqual(Note.objects.count(), 1)

    def test_slug_autogenerated(self):
        self.client.force_login(self.user)
        self.client.post(self.add_url, data={
            'title': 'Заметка',
            'text': 'Текст',
            'slug': '',
        }, follow=True)

        new_note = Note.objects.latest('id')
        self.assertTrue(new_note.slug.startswith('zametka'))

    def test_user_can_edit_own_note(self):
        self.client.force_login(self.other_user)
        response = self.client.post(self.edit_url, data={
            'title': 'New title',
            'text': 'Some text',
            'slug': 'original-slug',
        })
        self.note.refresh_from_db()
        self.assertNotEqual(self.note.title, 'New title')
        self.assertEqual(response.status_code, 404)

    def test_user_can_delete_own_note(self):
        self.client.force_login(self.user)
        self.client.post(self.delete_url)
        self.assertEqual(Note.objects.count(), 0)

    def test_user_cannot_delete_other_note(self):
        self.client.force_login(self.other_user)
        response = self.client.post(self.delete_url)
        self.assertEqual(Note.objects.count(), 1)
        self.assertEqual(response.status_code, 404)
